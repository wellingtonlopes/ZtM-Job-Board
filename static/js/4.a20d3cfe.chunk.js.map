{"version":3,"sources":["util/UsersDataCleanup.tsx","components/Map.tsx"],"names":["allCountryNamesFixedToMatchAPINames","data","people","map","person","location","country","replace","trim","countriesWithNumOfDevsObj","reduce","prev","curr","countryNamesAndNumOfDevsArr","Object","entries","centerLatLngArr","SimpleMap","zoom","useState","allCountriesLatLang","setAllCountriesLatLang","useEffect","isComponentSubscribedToPromise","fetch","then","resp","json","catch","err","console","error","countriesLatLngArr","name","latlng","UK","numberOfDevs","finalArrayWithCountryAndLatLng","i","length","j","toLowerCase","push","finalCountryAndLocationArray","markersArray","Marker","key","position","color","title","text","Popup","center","lat","lng","style","height","width","margin","minZoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","attribution","url"],"mappings":"uKAOA,MAiCMA,E,KAjCcC,EAAKC,OAYaC,IAAKC,IAAoB,IAAD,EAC5D,iBACEA,EAAOC,SAASC,eADlB,aACE,EAGIC,QAAQ,iBAAkB,IAE3BA,QAAQ,uDAAwD,IAEhEA,QAAQ,OAAQ,KAChBC,SAW4DL,IAChEG,IACC,OAAQA,GACN,IAAK,KAEL,IAAK,MAEL,IAAK,gBAEL,IAAK,2BACH,MAAO,2BACT,IAAK,MACH,MAAO,uBACT,IAAK,KACH,MAAO,iBACT,IAAK,QAEL,IAAK,KACH,MAAO,QACT,IAAK,KAEL,IAAK,SACH,MAAO,qBACT,IAAK,KACH,MAAO,QACT,IAAK,UACH,MAAO,OACT,IAAK,WACH,MAAO,YACT,IAAK,UACH,MAAO,UACT,QACE,OAAOA,KAoBR,MAAMG,EACXT,EAZ4DU,OAC1D,CAACC,EAAWC,KAEVD,EAAKC,IAASD,EAAKC,IAAS,GAAK,EAC1BD,GAET,IC7EJ,MAAME,EAA8BC,OAAOC,QAAQN,GAInD,IAAIO,EAAuB,GA4IZC,UA1If,UAAmB,KAAEC,EAAO,IAAM,MAAD,EACuBC,mBAAS,IADhC,mBACxBC,EADwB,KACHC,EADG,KAG/BC,oBAAU,KAOR,IAAIC,GAAiC,EASrC,OARIA,GACFC,MAAM,wCACHC,KAAMC,GAASA,EAAKC,QACpBF,KAAMxB,IACDsB,GAAgCF,EAAuBpB,KAE5D2B,MAAOC,GAAQC,QAAQC,MAAMF,IAE3B,KACLN,GAAiC,IAElC,IAIH,IAAIS,EAA0BZ,EAAoBjB,IAAI,EAAG8B,OAAMC,aAAT,CACpDD,OACAC,YAQF,MAAMC,EAAK,CACT7B,QAAS,iBACT4B,OAAQ,CAAC,IAAK,GACdE,aAAc3B,EAA0B,mBAI1C,IAAI4B,EAAsC,IAC1C,WACE,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAA4B0B,OAAQD,IACtD,IAAK,IAAIE,EAAI,EAAGA,EAAIR,EAAmBO,OAAQC,IAE3C3B,EAA4ByB,GAAG,GAAGG,gBAClCT,EAAmBQ,GAAGP,KAAKQ,eAE3BJ,EAA+BK,KAAK,CAClCpC,QAASO,EAA4ByB,GAAG,GACxCJ,OAAQF,EAAmBQ,GAAGN,OAC9BE,aAAcvB,EAA4ByB,GAAG,KAMrDD,EAA+BK,KAAKP,GAGtCQ,GAqBA,MAAMC,EAAeP,EAA+BlC,IAClD,EAAGG,UAAS4B,SAAQE,kBAEhB,kBAACS,EAAA,EAAD,CACEC,IAAKxC,EACLyC,SAAU,CAACb,EAAO,GAAIA,EAAO,IAC7Bc,MAAM,YACNC,MACmB,IAAjBb,EACIA,EAAe,mBAAqB9B,EACpC8B,EAAe,oBAAsB9B,EAE3C4C,KAAMd,GAEN,kBAACe,EAAA,EAAD,KACoB,IAAjBf,EACGA,EAAe,mBAAqB9B,EACpC8B,EAAe,oBAAsB9B,KAO7C8C,EACJpC,EAAgBuB,OAAS,EACrB,CAACvB,EAAgB,GAAGqC,IAAKrC,EAAgB,GAAGsC,KAC5C,CAAC,WAAY,UAEnB,OACE,yBAAKC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,OAAQ,IACnD,kBAAC,IAAD,CACEN,OAAQA,EACRlC,KAAMA,EACNyC,QAAS,EACTC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,SAAS,EACTC,cAAe,KAEf,kBAACC,EAAA,EAAD,CACEC,YAAY,2EACZC,IAAI,uDAEL1B","file":"static/js/4.a20d3cfe.chunk.js","sourcesContent":["import { data } from \"../assets/persons.js\"\n/* CLEAN UP THE persons.json DATA TO MAKE IT EASIER \nTO MAKE FETCH REQUESTS FOR COUNTRIES AND COORDINATES \n(LATITUDE, LONGITUDE) AND COMPARE AND MATCH THEM */\n\nimport Person from \"../interfaces/person\"\n\nconst people: any = data.people\n\n// Using uuid for the person id\n// const normalizeIDs = () => {\n//   people.forEach((person: Person, index: number) => {\n//     person.id = index + 1\n//   })\n// }\n\n// normalizeIDs()\n\n// Removed all the brackets, extra spaces, symbols and unnecessary stuff from country names\nconst allCountryNamesCleaned = people.map((person: Person) => {\n  return (\n    person.location.country\n      //removes brackets and everything inside brackets.\n      // lot of people have added (Available for remote work) or similar in brackets\n      ?.replace(/ *\\([^)]*\\) */g, \"\")\n      // removes anything other than alphabets and latin/other letters éáíúçèk stuff\n      .replace(/[^A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00f6\\u00f8-\\u00ff\\s]+/g, \"\")\n      // replaces 2 or more whitespaces with one\n      .replace(/  +/g, \" \")\n      .trim()\n    // .toLowerCase()\n  )\n})\n\n// Used switch to fix country names to get proper country latitude and longitude\n// TODO: But some strict rules should be made for adding country names so that this wont be necessary\n// And whoever merges pull requests for adding new users should make sure the data is clean before merging\n\n// This will contain duplicate country names\n// that are removed in the next function - removeDuplicateCountryNames\nconst allCountryNamesFixedToMatchAPINames = allCountryNamesCleaned.map(\n  (country: any) => {\n    switch (country) {\n      case \"US\":\n        return \"United States of America\"\n      case \"USA\":\n        return \"United States of America\"\n      case \"United States\":\n        return \"United States of America\"\n      case \"United States Of America\":\n        return \"United States of America\"\n      case \"UAE\":\n        return \"United Arab Emirates\"\n      case \"UK\":\n        return \"United Kingdom\"\n      case \"INDIA\":\n        return \"India\"\n      case \"IN\":\n        return \"India\"\n      case \"RU\":\n        return \"Russian Federation\"\n      case \"Russia\":\n        return \"Russian Federation\"\n      case \"CH\":\n        return \"China\"\n      case \"Perú\":\n        return \"Peru\"\n      case \"SriLanka\":\n        return \"Sri Lanka\"\n      case \"NIGERIA\":\n        return \"Nigeria\"\n      default:\n        return country\n    }\n  }\n)\n\n// This function will return an object with country name and the number of developers from that country\n// It adds the number of developers as it comes across duplicate country names\n\nfunction removeDuplicateCountryNames(countryArrayWithDuplicateValues: any) {\n  let deduplicatedCountries = countryArrayWithDuplicateValues.reduce(\n    (prev: any, curr: any) => {\n      // console.log(\"prev\", prev, \"current\", curr);\n      prev[curr] = (prev[curr] || 0) + 1\n      return prev\n    },\n    {}\n  )\n\n  return deduplicatedCountries\n}\nexport const countriesWithNumOfDevsObj = removeDuplicateCountryNames(\n  allCountryNamesFixedToMatchAPINames\n)\n","import React, { useEffect, useState } from \"react\"\nimport { Map as LeafletMap, Marker, Popup, TileLayer } from \"react-leaflet\"\n\nimport { countriesWithNumOfDevsObj } from \"../util/UsersDataCleanup\"\n\n// console.log(countriesWithNumOfDevsObj);\n\n// Array of country names and number of devs in those countries\n/* Needed to match country names from countriesWithNumOfDevsObj against \ncountry names fetched from API to get their latitude and longitude for markers */\nconst countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj)\n\n// console.log(countryNamesAndNumOfDevsArr);\n\nlet centerLatLngArr: any = []\n\nfunction SimpleMap({ zoom = 3 }) {\n  const [allCountriesLatLang, setAllCountriesLatLang] = useState([])\n\n  useEffect(() => {\n    // If the user goes back to home before map has loaded, the Map component will unmount\n    // but since fetch cannot be cancelled, react will try to setSate on an unmounted component\n    // when the fetch Promise resolves\n    // This throws memory leak error so isComponentSubscribedToPromise is used as a flag\n    // to check if the component was unmounted before setting state\n    // and setAllCountriesLatLang is not called if Map component has unmounted\n    let isComponentSubscribedToPromise = true\n    if (isComponentSubscribedToPromise) {\n      fetch(`https://restcountries.eu/rest/v2/all`)\n        .then((resp) => resp.json())\n        .then((data) => {\n          if (isComponentSubscribedToPromise) setAllCountriesLatLang(data)\n        })\n        .catch((err) => console.error(err))\n    }\n    return () => {\n      isComponentSubscribedToPromise = false\n    }\n  }, [])\n\n  // console.log(allCountriesLatLang);\n\n  let countriesLatLngArr: any = allCountriesLatLang.map(({ name, latlng }) => ({\n    name,\n    latlng,\n  }))\n  // console.log(countriesLatLngArr);\n\n  /* \n  Made separate variable for UK because name of UK in API is \"United Kingdom \n  of Great Britain and Northern Ireland\" which probably none of the users will use\n  */\n  const UK = {\n    country: \"United Kingdom\",\n    latlng: [54, -2], // copied from API\n    numberOfDevs: countriesWithNumOfDevsObj[\"United Kingdom\"],\n  }\n\n  // Two nested for loops are okay as array items will always be < 250 in both arrays\n  let finalArrayWithCountryAndLatLng: any = []\n  function finalCountryAndLocationArray() {\n    for (let i = 0; i < countryNamesAndNumOfDevsArr.length; i++) {\n      for (let j = 0; j < countriesLatLngArr.length; j++) {\n        if (\n          countryNamesAndNumOfDevsArr[i][0].toLowerCase() ===\n          countriesLatLngArr[j].name.toLowerCase()\n        ) {\n          finalArrayWithCountryAndLatLng.push({\n            country: countryNamesAndNumOfDevsArr[i][0],\n            latlng: countriesLatLngArr[j].latlng,\n            numberOfDevs: countryNamesAndNumOfDevsArr[i][1],\n          })\n        }\n      }\n    }\n    // Add UK to final array of countries and co-ordinates\n    finalArrayWithCountryAndLatLng.push(UK)\n    return finalArrayWithCountryAndLatLng\n  }\n  finalCountryAndLocationArray()\n  // console.log(finalArrayWithCountryAndLatLng);\n\n  // DO NOT DELETE THIS COMMENTED OUT CODE BELOW\n  // Might need it to check for unexpected repeated entries which is easier with sorted countries\n  /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.country.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n  const markersArray = finalArrayWithCountryAndLatLng.map(\n    ({ country, latlng, numberOfDevs }: any) => {\n      return (\n        <Marker\n          key={country}\n          position={[latlng[0], latlng[1]]}\n          color=\"royalblue\"\n          title={\n            numberOfDevs === 1\n              ? numberOfDevs + \" Developer from \" + country\n              : numberOfDevs + \" Developers from \" + country\n          }\n          text={numberOfDevs}\n        >\n          <Popup>\n            {numberOfDevs === 1\n              ? numberOfDevs + \" Developer from \" + country\n              : numberOfDevs + \" Developers from \" + country}\n          </Popup>\n        </Marker>\n      )\n    }\n  )\n\n  const center: any =\n    centerLatLngArr.length > 0\n      ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng]\n      : [55.378052, -3.435973]\n\n  return (\n    <div style={{ height: \"90vh\", width: \"100%\", margin: 0 }}>\n      <LeafletMap\n        center={center}\n        zoom={zoom}\n        minZoom={1}\n        maxZoom={10}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {markersArray}\n      </LeafletMap>\n    </div>\n  )\n}\n\nexport default SimpleMap\n"],"sourceRoot":""}